services:
    orion:
        image: fiware/orion
        hostname: orion
        container_name: fiware-orion
        depends_on:
            - mongo-db        
        networks: 
            - default
        expose:
            - "1026"
        ports: 
            - "1026:1026"
        command: -logLevel DEBUG -dbURI mongodb://mongo-db
    iot-agent:
        image: fiware/iotagent-ul
        hostname: iot-agent
        container_name: fiware-iot-agent
        depends_on:
          - mongo-db
          - mosquitto
        networks:
          - default
        expose:
          - "4041"
        ports:
          - "4041:4041" # localhost:4041
        environment:
          - IOTA_CB_HOST=orion # name of the context broker to update context
          - IOTA_CB_PORT=1026 # port the context broker listens on to update context
          - IOTA_NORTH_PORT=4041
          - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
          - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
          - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
          - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
          - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
          - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
          - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
          - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
          - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
          - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
          - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
          - IOTA_PROVIDER_URL=http://iot-agent:4041
          - IOTA_DEFAULT_TRANSPORT=MQTT
        
    mongo-db:
        image: mongo
        hostname: mongo-db
        container_name: db-mongo
        expose:
            - "27017"
        ports: 
            - "27017:27017"
        networks: 
            - default
        volumes:
            - mongo-db:/data
            
    mosquitto:
        hostname: mosquitto
        container_name: mosquitto
        build:
            context: .
            dockerfile: Dockerfile
        expose:
          - "1883"
          - "9001"
        ports:
          - "1883:1883"
          - "9001:9001"
        volumes:
          - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
        networks:
          - default
    quantumleap:
        image: orchestracities/quantumleap
        hostname: quantumleap
        container_name: fiware-quantumleap
        ports:
            - "8668:8668"
        depends_on:
            - crate-db
            - redis-db
        environment:
            - CRATE_HOST=crate-db
            - REDIS_HOST=redis-db
            - REDIS_PORT=6379
            - LOGLEVEL=DEBUG
    
    crate-db:
        image: crate
        hostname: crate-db
        container_name: db-crate
        ports:
            # Admin UI
            - "4200:4200"
            # Transport protocol
            - "4300:4300"
        command: crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*" -Cdiscovery.type=single-node
        environment:
            - CRATE_HEAP_SIZE=2g # see https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting
        volumes:
            - crate-db:/data 

    redis-db:
        image: redis
        hostname: redis-db
        container_name: db-redis
        networks:
            - default
        ports:
            - "6379:6379"
        volumes:
            - redis-db:/data
            
    grafana:
        image: grafana/grafana
        container_name: grafana
        depends_on:
            - crate-db
        ports:
            - "3000:3000"
        environment:
            - GF_INSTALL_PLUGINS=orchestracities-map-panel,grafana-clock-panel,grafana-worldmap-panel
        volumes:
            - grafana:/var/lib/grafana
            
volumes:
    mongo-db: ~
    crate-db: ~
    redis-db: ~
    grafana: ~      